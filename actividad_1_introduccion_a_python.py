# -*- coding: utf-8 -*-
"""Actividad 1- Introduccion a Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I_8PybCeGph-JQixaFPBHrkDAQ2UPC3O

Normalizar la lista de 5 personas:
1.   Corregir mayúsculas y minúsculas.
2.   El resultado deberá almacenarse como una variable tipo lista llamada lista_personas_normalizada donde se incluyan todas las personas de la variable lista_personas y personas_faltantes.
3. Corroborar en esta nueva variable que el tipo de dato sea el pedido.
4. Deberá estar ordenado alfabeticamente el orden de esta lista nueva.
5. Mostrar en un print las personas faltantes, indicando en el texto cuántas personas son y cómo se llaman (f-strings 😉).
6. Agregar tu nombre y apellido en primera posición de la variable lista_personas_normalizada y eliminar el último posicionado en ella.
7. Partiendo de la posición actual de tu nombre, quedarse sólo con las personas cuya posición sera número par.
"""

lista_personas = [
'leandro pérez',
"María Rodríguez",
"Alejandro- gonzález",
'  karen martínez',
"manuel Sánchez,"
]

personas_faltantes = """sebastian.villarruel-carolina_SEGOVIA"""

"""**Resultado esperado:**"""

lista_personas_normalizada[::2]

"""*Para mayor prolijidad, cada item pedido deberá corresponder a una celda distinta en el colab!*"""

#COrregir mayúsculas y minúsculas
lista_personas = [nombre.title() for nombre in lista_personas]

# Almacenar todas las personas en una variable tipo lista
lista_personas_normalizada = lista_personas + personas_faltantes.split('-')

#comprobar el tipo de dato
if isinstance(lista_personas_normalizada, list):
    print("El tipo de dato es una lista.")

#ordenar alfabeticamente
lista_personas_normalizada.sort()

#mostrar personas faltantes
faltantes = personas_faltantes.split('-')
print(f"Hay {len(faltantes)} personas faltantes: {', '.join(faltantes)}")

#agregar mi nombre y apellido a la lista
tu_nombre = "Céline Pérez"
lista_personas_normalizada.insert(0, tu_nombre)
lista_personas_normalizada.pop()

#quedarse con las personas en posicion par
personas_pares = lista_personas_normalizada[1::2]

print("Lista de personas normalizada:", lista_personas_normalizada)
print("Personas en posiciones pares:", personas_pares)

"""Crear un contador de vocales (del lenguaje español):
1. Utilizar alguna estructura de control
2. Emplear manipulación de datos de recolección.
3. Generar un mensaje que determine cuál es el total de vocales existentes en la cadena de caracteres, y cuál tiene menos ocurrencias.
4. Generar un mensaje que responda: ¿Hay más ocurrencias de "i" que de "u"?
5. Finalmente, recopilar el contador de vocales dentro de una función.
"""

frase = "Buenas noches, queridos alumnos. Soy una variable que viene a rellenar esta actividad."
vocales = ['a','e','i','o','u']

"""*Ejemplo de la actividad para los puntos 1, 2 y 3:*"""

conteo_vocales = {}
for vocal in vocales:
    count = frase.count(vocal)
    conteo_vocales[vocal] = count

frecuencia_vocales = {vocal: 0 for vocal in vocales}

for letra in frase:
    if letra in vocales:
        frecuencia_vocales[letra] += 1

pares = list(frecuencia_vocales.items())
lista_ordenada = sorted(pares, key=lambda x: x[1])
valor = lista_ordenada[0][0]


print("El total de vocales es de {}, siendo la vocal \"{}\" la de menor ocurrencia.".format(sum(conteo_vocales.values()), valor))

def contar_vocales(frase):
    #diccionario para contar las vocales
    contador_vocales = {}
    for vocal in vocales:
        contador_vocales[vocal] = 0


    # Contar las vocales en la frase
    i = 0
    while i < len(frase):
      letra = frase[i]
      if letra in contador_vocales:
        contador_vocales[letra] += 1
      i += 1

    # 3.vocal con menos ocurrencias
    min_ocurrencias = min(contador_vocales.values())
    vocal_menos_ocurrencias = 0
    for vocal, ocurrencias in contador_vocales.items():
        if ocurrencias == min_ocurrencias:
            vocal_menos_ocurrencias = vocal



    # más ocurrencias de "i" que de "u"
    mas_i_que_u = contador_vocales['i'] > contador_vocales['u']

    #prints
    total_vocales = f"EL total de vocales es: {sum(contador_vocales.values())}"
    menos_ocurrencias = f"Vocal con menos ocurrencias: {vocal_menos_ocurrencias} ({min_ocurrencias} ocurrencias)"

    #print para saber si hay mas i que u o no
    if mas_i_que_u:
        i_ocurrencias_u= "Hay más ocurrencias de 'i' que de 'u'."
    else:
      i_ocurrencias_u= "No hay más ocurrencias de 'i' que de 'u'."

    return total_vocales, menos_ocurrencias, i_ocurrencias_u


resultados = contar_vocales(frase)
for resultado in resultados:
    print(resultado)